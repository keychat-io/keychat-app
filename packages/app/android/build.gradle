buildscript {
    ext.kotlin_version = '1.9.24'
    repositories {
      google()
      mavenCentral()
      maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:8.3.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.gms:google-services:4.3.10'
    }
}

// configurations.all {
//     resolutionStrategy {
//         force 'androidx.core:core-ktx:1.6.0'
//     }
// }

allprojects {
    repositories {
      google()
      mavenCentral()      
      maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
    }
}

// rootProject.buildDir = '../build/'
// rootProject.buildDir = "${rootProject.buildDir}/${project.name}"
rootProject.buildDir = '../build/'
subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"
    afterEvaluate {
        if (project.hasProperty('android')) {
                   if (project.android.namespace == null) {
                def manifest = new XmlSlurper().parse(file(project.android.sourceSets.main.manifest.srcFile))
                def packageName = manifest.@package.text()
                println("Setting ${packageName} as android namespace")
                android.namespace = packageName
            }

            def javaVersion = JavaVersion.VERSION_1_8
            android {
                def androidApiVersion = 34
                compileSdkVersion androidApiVersion
                defaultConfig {
                    targetSdkVersion androidApiVersion
                }
                compileOptions {
                    sourceCompatibility javaVersion
                    targetCompatibility javaVersion
                }
                tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
                    kotlinOptions {
                        jvmTarget = javaVersion.toString()
                    }
                }
                println("Setting java version to ${javaVersion.toString()} which is $javaVersion")
                println("Setting compileSdkVersion and targetSdkVersion to $androidApiVersion")
            }
        }
    }
}

subprojects {
    project.evaluationDependsOn(':app')
}

tasks.register("clean", Delete) {
    delete rootProject.buildDir
}