name: build
on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: "Log level"
        required: true
        default: "warning"
        type: choice
        options:
          - info
          - warning
          - debug
      environment:
        description: "Deployment environment"
        required: false
        type: string
  push:
    branches:
      - "workflow"
    tags:
      - "v*"
env:
  # .ref == refs/heads/feature/new-login
  # .ref_name == new-login
  IS_STABLE: ${{ !contains(github.ref, '-') }}

jobs:
  get-version:
    name: Create release
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.version_step.outputs.version }}
      version_short: ${{ steps.version_step.outputs.version_short }}
      build_number: ${{ steps.version_step.outputs.build_number }}
    steps:
      - uses: actions/checkout@v4
      - name: Set version
        id: version_step
        working-directory: ./packages/app/
        run: |
          VERSION=$(yq '.version' pubspec.yaml)
          echo "VERSION: $VERSION."

          VERSION_SHORT=$(echo "$VERSION" | sed -e "s/+.*//")
          echo "VERSION_SHORT: $VERSION_SHORT."

          BUILD_NUMBER=$(echo "$VERSION" | sed -e "s/.*+//")
          echo "BUILD_NUMBER: $BUILD_NUMBER."

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_short=$VERSION_SHORT" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
  build-linux:
    # if: false # Temporarily disabled for testing
    runs-on: ubuntu-22.04
    needs: get-version
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 2
      - name: Setup-Linux
        run: |
          echo "Building for platform: linux"
          sudo apt-get update -y && sudo apt-get upgrade -y
          sudo apt-get install -y curl libcurl4-openssl-dev git unzip xz-utils zip libglu1-mesa
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev
          cargo install flutter_rust_bridge_codegen@2.9.0
          rustup target add x86_64-unknown-linux-gnu aarch64-unknown-linux-gnu
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.32.1"
          cache: true
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "29.3"
      - name: Install melos-fastforge
        run: |
          dart pub global activate melos 7.0.0-dev.9
          dart pub global activate fastforge
          melos bootstrap
      - name: Install appimage
        run: |
          sudo apt install locate
          wget -O appimagetool "https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool
          mv appimagetool /usr/local/bin/
      - name: Build-Linux-APP
        working-directory: ./packages/app/
        run: |
          echo "PROJECT_NAME=Keychat" > .env
          export PROTOC=$(which protoc)
          fastforge package \
            --flutter-build-args "dart-define-from-file=.env,target=lib/main.dart" \
            --platform linux \
            --targets deb,rpm,appimage \
            --artifact-name 'Keychat-{{build_name}}+{{build_number}}-{{platform}}-amd64.{{ext}}'
        env:
          BUILD_NAME: ${{ needs.get-version.outputs.version_short }}
          BUILD_NUMBER: ${{ needs.get-version.outputs.build_number }}
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: artifact-linux-x86_64
          path: ./dist
          overwrite: true
      - name: Clean up
        run: |
          rm -f .env
          cd ./packages/app/ && rm -f .env

  build-windows:
    # if: false # Temporarily disabled for testing
    runs-on: windows-latest
    needs: get-version
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 2
      - name: Add Android target
        run: |
          rustup target add aarch64-linux-android
          rustup target add armv7-linux-androideabi
          rustup target add x86_64-linux-android
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.32.1"
          cache: true
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "29.3"
      - name: Install melos-fastforge
        run: |
          dart pub global activate melos 7.0.0-dev.9
          dart pub global activate fastforge
          melos bootstrap
      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v2
      - name: Build-Windows-APP
        working-directory: ./packages/app/
        run: |
          echo "PROJECT_NAME=Keychat" | Out-File -FilePath .env -Encoding utf8
          fastforge package --platform windows --targets exe
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: artifact-windows-amd64
          path: ./dist
          overwrite: true

  build-android:
    if: false # Temporarily disabled for testing
    runs-on: ubuntu-22.04
    needs: get-version
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 2
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
      - name: Install NDK
        id: install-ndk
        run: |
          sdkmanager "ndk;29.0.13113456"
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.32.2"
          cache: true
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "29.3"
      - name: Install melos-fastforge
        run: |
          dart pub global activate melos 7.0.0-dev.9
          dart pub global activate fastforge
          melos bootstrap
      - name: Setup Google Services
        working-directory: ./packages/app/android/app/
        run: |
          echo "${{ secrets.GOOGLE_SERVICES_JSON }}" | base64 --decode > google-services.json
      - name: Setup Android Signing
        working-directory: ./packages/app/android/
        run: |
          echo "${{ secrets.KEYSTORE }}" | base64 --decode > app/keystore.jks
          echo "storeFile=keystore.jks" >> key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> key.properties
          echo "storePassword=${{ secrets.STORE_PASSWORD }}" >> key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> key.properties

          echo "app=Keychat" >> local.properties
          echo "flutter.minSdkVersion=31" >> local.properties
          echo "flutter.targetSdkVersion=35" >> local.properties
          echo "flutter.compileSdkVersion=35" >> local.properties
      - name: Build-Android-APP
        working-directory: ./packages/app/
        run: |
          echo "PROJECT_NAME=Keychat" > .env
          export PROTOC=$(which protoc)
          flutter build apk --release
          mkdir ../../dist
          cp -r ./packages/app/build/app/outputs/apk/release/*.apk ../../dist/
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: artifact-android
          path: ./dist
          overwrite: true
      - name: Clean up
        run: |
          rm -f .env
          cd ./packages/app/ && rm -f .env
          rm -f android/app/keystore.jks
          rm -f android/key.properties
          rm -f .env
  upload:
    permissions: write-all
    needs: [get-version, build-windows, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download
        uses: actions/download-artifact@v4
        with:
          path: ./dist/
          pattern: artifact-*
          merge-multiple: true
      - name: Display structure of downloaded files
        run: ls -R ./dist/
      - name: Patch release.md
        run: |
          version=$BUILD_NAME
          sed "s|VERSION|$version|g" ./.github/release_template.md >> release.md
        env:
          BUILD_NAME: ${{ needs.get-version.outputs.version_short }}
      - name: Copy artifacts to dist root
        run: |
          BUILD_DIR="./dist/${BUILD_NAME}+${BUILD_NUMBER}"
          if [ -d "$BUILD_DIR" ]; then
          echo "Moving files from $BUILD_DIR to ./dist/"
          mv "$BUILD_DIR"/* ./dist/
          rm -rf "$BUILD_DIR"
          echo "Files moved successfully."
          else
          echo "Directory $BUILD_DIR not found. Current structure:"
          find ./dist -type d | sort
          fi
        env:
          BUILD_NAME: ${{ needs.get-version.outputs.version_short }}
          BUILD_NUMBER: ${{ needs.get-version.outputs.build_number }}

      - name: Generate sha256
        working-directory: ./dist/
        run: |
          for file in $(find . -type f -not -name "*.sha256"); do
            sha256sum "$file" > "${file}.sha256"
          done

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./dist/*
          body_path: "./release.md"
          draft: true
