name: keychat_workspace
repository: https://github.com/key-chat/app-melos

packages:
  - shared/**
  - packages/**

ignore:
  - packages/app/build/**
  - packages/keychat_rust_ffi_plugin/cargokit/**

scripts:
  postclean:
    run: melos run clean:flutter --no-select
    description: Runs "flutter clean" in all Flutter packages

  lint:all:
    run: melos run analyze && melos run format
    description: Run all static analysis checks

  analyze:all:
    run: melos run analyze && melos run metrics
    description: Run all

  analyze:
    run: |
      melos exec -c 5 --ignore="*example*" -- \
        dart analyze --fatal-infos .
    description: |
      Run `dart analyze` in all packages.
       - Note: you can also rely on your IDEs Dart Analysis / Issues window.

  format:
    run: dart format --set-exit-if-changed .
    description: |
      Run `dart format --set-exit-if-changed .` in all packages.

  metrics:
    run: |
      melos exec -c 1 --ignore="*example*" -- \
        flutter pub run dart_code_metrics:metrics analyze lib
    description: |
      Run `dart_code_metrics` in all packages.
       - Note: you can also rely on your IDEs Dart Analysis / Issues window.

  generate:all:
    run: melos run generate:dart && melos run generate:flutter
    description: Build all generated files for Dart & Flutter packages in this project.

  generate:dart:
    run: melos exec -c 1 --depends-on="build_runner" --no-flutter -- "dart run build_runner build --delete-conflicting-outputs"
    description: Build all generated files for Dart packages in this project.

  generate:flutter:
    run: melos exec -c 1 --depends-on="build_runner" --flutter -- "flutter pub run build_runner build --delete-conflicting-outputs"
    description: Build all generated files for Flutter packages in this project.

  test:all:
    run: melos run test:dart --no-select && melos run test:flutter --no-select
    description: Run all Dart & Flutter tests in this project.

  test:dart:
    run: melos exec -c 1 --fail-fast -- "flutter test --coverage"
    description: Run Dart tests for a specific package in this project.
    packageFilters:
      flutter: false
      dirExists: test

  test:flutter:
    run: melos exec -c 4 --fail-fast -- "flutter test --coverage"
    description: Run Flutter tests for a specific package in this project.
    packageFilters:
      flutter: true
      dirExists: test

  clean:flutter:
    run: melos exec -c 4 --fail-fast -- "flutter clean && flutter pub get && rm -rf ios/Podfile.lock && cd ios && pod repo update && pod install"
    description: Run Flutter clean for a specific package in this project.
    packageFilters:
      flutter: true

  coverage:ignore-file:
    run: |
      melos exec -c 5 --fail-fast -- "\$MELOS_ROOT_PATH/.github/workflows/scripts/remove-from-coverage.sh"
    description: Removes all the ignored files from the coverage report.
    packageFilters:
      dirExists: coverage

  docs:
    run: |
      npm install -g https://github.com/GetStream/stream-chat-docusaurus-cli &&
      npx stream-chat-docusaurus -i -s
    description: Runs the docusaurus documentation locally.

  intl:generate:
    name: app_intl
    description: "generate intl utils for mobile packages"
    run: cd packages/app && fvm flutter pub run intl_utils:generate

  build:runner:
    name: app_build_runner
    description: "app build runner"
    run: cd packages/app && fvm flutter pub run build_runner build --delete-conflicting-outputs

  pod:install:
    name: pod_install_app
    description: "pod install"
    run: cd packages/app/ios && pod install

  core:intl:generate:
    name: core_intl
    description: "generate intl utils for core package"
    run: cd shared/core && fvm flutter pub run intl_utils:generate

  app:get:
    name: app_get
    description: "run app pub get only"
    run: cd packages/app && fvm flutter pub get

  image:gen:
    name: gen_image
    description: "generate assets class"
    run: bash scripts/image_gen.sh

  pre:env:
    name: prepare_env
    description: "prepare env"
    run: bash scripts/prepare_env.sh

  build:ios:
    name: build_ios
    description: "build ios"
    run: bash scripts/build_ios.sh
  build:macos:
    name: build_ios
    description: "build ios"
    run: bash scripts/build_macos.sh    

  build:android:
    name: build_ios
    description: "build android"
    run: bash scripts/build_android.sh
  rust:ios:
    name: rust_api_2_dart
    run: bash scripts/rust_generate_ios.sh
  rust:ios_sim:
    name: rust:ios_sim
    run: bash scripts/rust_generate_ios_sim.sh
  rust:macos:
    name: rust_macos
    run: bash scripts/rust_generate_macos.sh
  macos_rust_lib:
    name: macos_rust_lib
    run: sudo cp -f packages/app/build/macos/Build/Products/Debug/rust.dylib /usr/local/lib/

ide:
  intellij:
    enabled: false
