name: build
on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: "Log level"
        required: true
        default: "warning"
        type: choice
        options:
          - info
          - warning
          - debug
      environment:
        description: "Deployment environment"
        required: false
        type: string
  push:
    branches:
      - "workflow"
    tags:
      - "v*"
env:
  # .ref == refs/heads/feature/new-login
  # .ref_name == new-login
  IS_STABLE: ${{ !contains(github.ref, '-') }}

jobs:
  create-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # - platform: android
          #   os: ubuntu-latest
          - platform: windows
            os: windows-latest
            arch: amd64
          - platform: linux
            os: ubuntu-22.04
            arch: amd64
          # - platform: macos
          #   os: macos-latest
          #   arch: arm64
    outputs:
      sha: ${{ steps.sha_step.outputs.sha }}
      version: ${{ steps.version_step.outputs.version }}
      version_short: ${{ steps.version_step.outputs.version_short }}
      build_number: ${{ steps.version_step.outputs.build_number }}
      release: ${{ steps.version_step.outputs.release }}
      tag_name: ${{ steps.version_step.outputs.tag_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 2
      - name: Set sha
        id: sha_step
        run: |
          SHA=$(git rev-parse HEAD)
          echo "SHA: $SHA."

          SHA_SHORT=$(git rev-parse --short=8 HEAD)
          echo "SHA_SHORT: $SHA_SHORT."

          echo "sha=$SHA" >> $GITHUB_OUTPUT
          echo "sha_short=$SHA_SHORT" >> $GITHUB_OUTPUT
      - name: Set version
        id: version_step
        working-directory: ./packages/app/
        run: |
          VERSION=$(yq '.version' pubspec.yaml)
          echo "VERSION: $VERSION."

          VERSION_SHORT=$(echo "$VERSION" | sed -e "s/+.*//")
          echo "VERSION_SHORT: $VERSION_SHORT."

          BUILD_NUMBER=$(echo "$VERSION" | sed -e "s/.*+//")
          echo "BUILD_NUMBER: $BUILD_NUMBER."

          if [ "$ENV" == "staging" ]; then
            SUFFIX=".pre"
          elif [[ "$ENV" == "production" && "$IS_LATEST" == "false" ]]; then
            SUFFIX=".rc"
          else
            SUFFIX=""
          fi
          echo "SUFFIX: $SUFFIX"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_short=$VERSION_SHORT" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "release=$VERSION_SHORT.$BUILD_NUMBER$SUFFIX" >> $GITHUB_OUTPUT
          echo "tag_name=v$VERSION$SUFFIX" >> $GITHUB_OUTPUT
      - name: Setup-Linux
        if: ${{matrix.platform == 'linux'}}
        run: |
          echo "Building for platform: ${{ matrix.platform }}"
          sudo apt-get update -y && sudo apt-get upgrade -y
          sudo apt-get install -y curl libcurl4-openssl-dev git unzip xz-utils zip libglu1-mesa
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev
          cargo install flutter_rust_bridge_codegen@2.9.0
          rustup target add x86_64-unknown-linux-gnu aarch64-unknown-linux-gnu

      # - name: Setup Android Signing
      #   if: startsWith(matrix.platform,'android')
      #   run: |
      #     echo "${{ secrets.KEYSTORE }}" | base64 --decode > android/app/keystore.jks
      #     echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/local.properties
      #     echo "storePassword=${{ secrets.STORE_PASSWORD }}" >> android/local.properties
      #     echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/local.properties
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.32.1"
          cache: true
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "29.3"
      - name: Install melos
        run: dart pub global activate melos 7.0.0-dev.9
      - name: Setup-fastforge
        run: |
          dart pub global activate fastforge
          fastforge --version
      - name: Run melos bootstrap
        run: |
          export PATH="$PATH":"$HOME/.pub-cache/bin"
          melos bootstrap
      - name: Install appimage
        if: ${{ matrix.platform == 'linux' }}
        run: |
          sudo apt install locate
          wget -O appimagetool "https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool
          mv appimagetool /usr/local/bin/

      - name: Build-Linux-APP
        if: ${{matrix.platform == 'linux'}}
        working-directory: ./packages/app/
        run: |
          echo "PROJECT_NAME=Keychat" > .env
          export PROTOC=$(which protoc)
          fastforge package \
            --flutter-build-args "dart-define-from-file=.env,target=lib/main.dart" \
            --platform linux \
            --targets deb,rpm,appimage \
            --artifact-name '{{name}}-{{build_name}}+{{build_number}}-{{platform}}-amd64.{{ext}}'
      - name: Build-Linux-APP
        if: ${{matrix.platform == 'windows'}}
        working-directory: ./packages/app/
        run: |
          fastforge package \
            --flutter-build-args "dart-define-from-file=.env,target=lib/main.dart" \
            --platform windows \
            --targets msix\
            --artifact-name '{{name}}-{{build_name}}+{{build_number}}-{{platform}}-x86_64.{{ext}}'

      - name: Generate sha256
        run: |
          cd ./dist
          for file in $(find . -type f -not -name "*.sha256"); do
            sha256sum "$file" > "${file}.sha256"
          done
      # - name: Patch release.md
      #   run: |
      #     version=$(echo "${{ github.ref_name }}" | sed 's/^v//')
      #     sed "s|VERSION|$version|g" ./.github/release_template.md >> release.md

      # - name: Release
      #   uses: softprops/action-gh-release@v2
      #   with:
      #     files: ./dist/*
      #     body_path: "./release.md"
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.platform }}${{ matrix.arch && format('-{0}', matrix.arch) }}
          path: ./dist
          overwrite: true

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f .env
          cd ./packages/app/ && rm -f .env
